#define BLYNK_TEMPLATE_ID "Enter You Temp ID" // BLYNK_TEMPLATE_ID
#define BLYNK_TEMPLATE_NAME "Enter Tem Name" //BLYNK_TEMPLATE_NAME
#define BLYNK_AUTH_TOKEN "Enter Auth Token" // BLYNK_AUTH_TOKEN

#include <WiFi.h>
#include <BlynkSimpleEsp32.h>
#include <Wire.h>
#include <Adafruit_SHT31.h>
#include <U8g2lib.h>

// ===== Wi-Fi =====
const char* ssid = "Your Wifi Name"; //Your WIfi name
const char* pass = "Your Password"; //Your Wifi Password

// ===== I2C Addresses & Commands =====
#define RAINFALL_SENSOR_ADDRESS 0x5B
#define LDR_SENSOR_ADDRESS      0x08
#define OBSTACLE_SENSOR_ADDRESS 0x09
#define FAN_ADDRESS             0x5C
#define PUMP_ADDRESS            0x5D
#define SOIL_MOISTURE_ADDRESS   0x11

#define CMD_REQUEST_DATA        0x02
#define CMD_RAINFALL            0x01
#define ACT_ON                  0x01
#define ACT_OFF                 0x00

// ===== OLED Object =====
U8G2_SH1106_128X64_NONAME_F_HW_I2C u8g2(U8G2_R0, U8X8_PIN_NONE);

// ===== Local Sensors =====
Adafruit_SHT31 sht31;

// ===== State =====
bool fanState  = false;
bool pumpState = false;

// Last read sensor values (for OLED)
float lastTemp = NAN, lastHum = NAN;
uint8_t lastRain = 0, lastLDR = 0, lastSoil = 0, lastObs = 0;

// ===== Blynk Timer =====
BlynkTimer timer;

// ===== Helpers =====
bool writeOneByte(uint8_t addr, uint8_t data) {
  Wire.beginTransmission(addr);
  Wire.write(data);
  return (Wire.endTransmission() == 0);
}

bool readByteSensor(uint8_t addr, uint8_t &value, uint8_t cmd = CMD_REQUEST_DATA) {
  if (!writeOneByte(addr, cmd)) return false;
  delay(10);
  if (Wire.requestFrom((int)addr, 1) != 1) return false;
  if (!Wire.available()) return false;
  value = Wire.read();
  return true;
}

// ===== Blynk Write Handlers =====
BLYNK_WRITE(V0) { // Fan Switch
  int v = param.asInt();
  fanState = (v == 1);
  writeOneByte(FAN_ADDRESS, fanState ? ACT_ON : ACT_OFF);
}

BLYNK_WRITE(V1) { // Pump Switch
  int v = param.asInt();
  pumpState = (v == 1);
  writeOneByte(PUMP_ADDRESS, pumpState ? ACT_ON : ACT_OFF);
}

// ===== OLED Update =====
void updateDisplay() {
  u8g2.clearBuffer();
  u8g2.setFont(u8g2_font_5x8_tr);

  // Box layout
  u8g2.drawFrame(0, 0, 128, 64);   // Outer border

  // Temp & Humidity Box
  u8g2.drawFrame(2, 2, 60, 28);
  u8g2.setCursor(6, 12);
  u8g2.print("Temp:");
  if (isnan(lastTemp)) u8g2.print("NA");
  else u8g2.printf("%.1fC", lastTemp);
  u8g2.setCursor(6, 24);
  u8g2.print("Hum:");
  if (isnan(lastHum)) u8g2.print("NA");
  else u8g2.printf("%.1f%%", lastHum);

  // Rain & LDR Box
  u8g2.drawFrame(66, 2, 60, 28);
  u8g2.setCursor(70, 12);
  u8g2.print("Rain:");
  u8g2.print(lastRain);
  u8g2.setCursor(70, 24);
  u8g2.print("LDR:");
  u8g2.print(lastLDR);

  // Soil & Obstacle Box
  u8g2.drawFrame(2, 34, 60, 28);
  u8g2.setCursor(6, 44);
  u8g2.print("Soil:");
  u8g2.print(lastSoil);
  u8g2.setCursor(6, 56);
  u8g2.print("Obs:");
  u8g2.print(lastObs);

  // Actuator Box (Fan & Pump)
  u8g2.drawFrame(66, 34, 60, 28);
  u8g2.setCursor(70, 44);
  u8g2.print("Fan:");
  u8g2.print(fanState ? "ON" : "OFF");
  u8g2.setCursor(70, 56);
  u8g2.print("Pump:");
  u8g2.print(pumpState ? "ON" : "OFF");

  u8g2.sendBuffer();
}

// ===== Periodic Task =====
void pushSensors() {
  // SHT31 Temp/Humidity
  float t = sht31.readTemperature();
  float h = sht31.readHumidity();
  lastTemp = t; lastHum = h;

  if (isnan(t)) Blynk.virtualWrite(V2, "NA"); else Blynk.virtualWrite(V2, t);
  if (isnan(h)) Blynk.virtualWrite(V3, "NA"); else Blynk.virtualWrite(V3, h);

  // Rainfall
  uint8_t rain = 0;
  if (readByteSensor(RAINFALL_SENSOR_ADDRESS, rain, CMD_RAINFALL)) Blynk.virtualWrite(V4, rain);
  else Blynk.virtualWrite(V4, "NA");
  lastRain = rain;

  // LDR
  uint8_t ldr = 0;
  if (readByteSensor(LDR_SENSOR_ADDRESS, ldr)) Blynk.virtualWrite(V5, ldr);
  else Blynk.virtualWrite(V5, "NA");
  lastLDR = ldr;

  // Soil Moisture
  uint8_t soil = 0;
  if (readByteSensor(SOIL_MOISTURE_ADDRESS, soil)) Blynk.virtualWrite(V6, soil);
  else Blynk.virtualWrite(V6, "NA");
  lastSoil = soil;

  // Obstacle
  uint8_t obs = 0;
  if (readByteSensor(OBSTACLE_SENSOR_ADDRESS, obs)) Blynk.virtualWrite(V7, obs);
  else Blynk.virtualWrite(V7, "NA");
  lastObs = obs;

  updateDisplay();
}

void setup() {
  Serial.begin(115200);
  delay(100);

  Wire.begin();
  u8g2.begin();

  if (!sht31.begin(0x45)) {
    Serial.println("SHT31 not found!");
  }

  Blynk.begin(BLYNK_AUTH_TOKEN, ssid, pass);
  timer.setInterval(2000L, pushSensors); // update every 2s
}

void loop() {
  Blynk.run();
  timer.run();
}
